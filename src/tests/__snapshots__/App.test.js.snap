// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App should match snapshot 1`] = `
<main
  className="App"
>
  <AcronymContainer
    findNextWords={[Function]}
    stages={
      Array [
        Object {
          "description": "Setup the conditions required to execute the action on your Subject Under Test",
          "id": 1,
          "letter": "S",
          "name": "Setup",
          "starterWords": Array [
            "describe",
            "let",
            "beforeEach",
            "it",
            "const",
          ],
        },
        Object {
          "description": "Execute some action on your Subject Under Test, usually by calling methods",
          "id": 2,
          "letter": "E",
          "name": "Execution",
          "starterWords": Array [
            "wrapper",
          ],
        },
        Object {
          "description": "Assert that the action you did had the results you expect",
          "id": 3,
          "letter": "A",
          "name": "Assertion",
          "starterWords": Array [
            "expect",
          ],
        },
        Object {
          "description": "Clean up any resources you used in your test (this usully happens automatically)",
          "id": 4,
          "letter": "T",
          "name": "Tear Down",
        },
      ]
    }
  />
</main>
`;

exports[`App should render KeywordContainer and Chalkboard if showKeywords is true 1`] = `
<main
  className="App"
>
  <AcronymContainer
    findNextWords={[Function]}
    stages={
      Array [
        Object {
          "description": "Setup the conditions required to execute the action on your Subject Under Test",
          "id": 1,
          "letter": "S",
          "name": "Setup",
          "starterWords": Array [
            "describe",
            "let",
            "beforeEach",
            "it",
            "const",
          ],
        },
        Object {
          "description": "Execute some action on your Subject Under Test, usually by calling methods",
          "id": 2,
          "letter": "E",
          "name": "Execution",
          "starterWords": Array [
            "wrapper",
          ],
        },
        Object {
          "description": "Assert that the action you did had the results you expect",
          "id": 3,
          "letter": "A",
          "name": "Assertion",
          "starterWords": Array [
            "expect",
          ],
        },
        Object {
          "description": "Clean up any resources you used in your test (this usully happens automatically)",
          "id": 4,
          "letter": "T",
          "name": "Tear Down",
        },
      ]
    }
  />
  <KeywordContainer
    chalkboardChecker={[Function]}
    findNextWords={[Function]}
    keywords={
      Array [
        Object {
          "details": "Declare a variable that cannot be reassigned",
          "id": 100,
          "isEditable": false,
          "nextWords": Array [
            "mockData Name",
            "mockPropFunction",
          ],
          "phase": Array [
            "S",
          ],
          "value": "const ",
          "word": "const",
        },
        Object {
          "details": "Variable name for your mock data",
          "id": 101,
          "isEditable": true,
          "nextWords": Array [
            "=",
            "}",
          ],
          "phase": Array [
            "S",
          ],
          "value": "mock-",
          "word": "mockData Name",
        },
        Object {
          "details": "Name of mock function you will pass as props and/or spy on",
          "id": 102,
          "isEditable": true,
          "nextWords": Array [
            "=",
            "}",
          ],
          "phase": Array [
            "S",
          ],
          "value": "mock-",
          "word": "mockPropFunction",
        },
        Object {
          "details": "is assigned to",
          "id": 103,
          "isEditable": false,
          "nextWords": Array [
            "mockData value",
            "jest.fn()",
            "shallow",
          ],
          "phase": Array [
            "S",
          ],
          "value": " = ",
          "word": "=",
        },
        Object {
          "details": "Data that your Subject Under Test needs to opperate",
          "id": 104,
          "isEditable": true,
          "nextWords": Array [
            ";",
          ],
          "phase": Array [
            "S",
          ],
          "value": "",
          "word": "mockData value",
        },
        Object {
          "details": "A mock function used to replace methods passed to the component as props",
          "id": 105,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "jest.fn();",
          "word": "jest.fn()",
        },
        Object {
          "details": "Keyword that will allow you to label a testing block",
          "id": 106,
          "isEditable": false,
          "nextWords": Array [
            "Test Name",
          ],
          "phase": Array [
            "S",
          ],
          "value": "describe(",
          "word": "describe",
        },
        Object {
          "details": "A label for a testing block, most likely a component name or method",
          "id": 107,
          "isEditable": true,
          "nextWords": Array [
            "Arrow Function",
          ],
          "phase": Array [
            "S",
          ],
          "value": "'Component Name', ",
          "word": "Test Name",
        },
        Object {
          "details": "Initializes an anonymous function and holds tesing logic",
          "id": 108,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "() => {",
          "word": "Arrow Function",
        },
        Object {
          "details": "Declare a variable that can be reassigned",
          "id": 109,
          "isEditable": false,
          "nextWords": Array [
            "wrapper",
          ],
          "phase": Array [
            "S",
          ],
          "value": "let ",
          "word": "let",
        },
        Object {
          "details": "An object that surrounds the shallow rendering of an instance",
          "id": 110,
          "isEditable": false,
          "nextWords": Array [
            "=",
            ";",
            ")",
            "state(",
          ],
          "phase": Array [
            "S",
            "A",
          ],
          "value": "wrapper",
          "word": "wrapper",
        },
        Object {
          "details": "A function that will becalled at the begining of each it block",
          "id": 111,
          "isEditable": false,
          "nextWords": Array [
            "Arrow Function",
          ],
          "phase": Array [
            "S",
          ],
          "value": "beforeEach(",
          "word": "beforeEach",
        },
        Object {
          "details": "A function that will return a shallow rendering of a class instance",
          "id": 112,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "shallow(",
          "word": "shallow",
        },
        Object {
          "details": "The name of the React compnent you are testing",
          "id": 113,
          "isEditable": true,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "<Component Name",
          "word": "React Component Name",
        },
        Object {
          "details": "Similar to a key, this is how you will access the prop's value in the child component",
          "id": 114,
          "isEditable": true,
          "nextWords": Array [
            "mockData Name",
            "mockPropFunction",
          ],
          "phase": Array [
            "S",
          ],
          "value": "yourPropName={",
          "word": "Prop Name",
        },
        Object {
          "details": "Closing curly bracket",
          "id": 115,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "}",
          "word": "}",
        },
        Object {
          "details": "Closes a component element",
          "id": 116,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
          ],
          "value": "/>",
          "word": "/>",
        },
        Object {
          "details": "Closing parentheses",
          "id": 117,
          "isEditable": false,
          "nextWords": Array [
            ";",
            ".toMatchSnapshot()",
            ")",
            ".toEqual(",
          ],
          "phase": Array [
            "S",
          ],
          "value": ")",
          "word": ")",
        },
        Object {
          "details": "Similar to describe, this will ititiate a new test",
          "id": 118,
          "isEditable": false,
          "nextWords": Array [
            "Should Statement",
          ],
          "phase": Array [
            "S",
          ],
          "value": "it(",
          "word": "it",
        },
        Object {
          "details": "Text describing what you are testing, that will show in the terminal",
          "id": 119,
          "isEditable": true,
          "nextWords": Array [
            "Arrow Function",
          ],
          "phase": Array [
            "S",
          ],
          "value": "'-', ",
          "word": "Should Statement",
        },
        Object {
          "details": "Keyword that will start a line of assertion, setting the value you are testing",
          "id": 120,
          "isEditable": false,
          "nextWords": Array [
            "wrapper",
          ],
          "phase": Array [
            "A",
          ],
          "value": "expect(",
          "word": "expect",
        },
        Object {
          "details": "Compares the wrapper instance to a stored snapshot",
          "id": 121,
          "isEditable": false,
          "nextWords": Array [
            ";",
          ],
          "phase": Array [
            "A",
          ],
          "value": ".toMatchSnapshot()",
          "word": ".toMatchSnapshot()",
        },
        Object {
          "details": "A method of wrapper that will return that wrapper's state object, or a single piece of state",
          "id": 122,
          "isEditable": false,
          "nextWords": Array [
            ")",
            "stateKey",
          ],
          "phase": Array [
            "A",
          ],
          "value": ".state(",
          "word": "state(",
        },
        Object {
          "details": "An optional argument of the .state() method that returns that specific piece of state",
          "id": 123,
          "isEditable": true,
          "nextWords": Array [
            ")",
          ],
          "phase": Array [
            "A",
          ],
          "value": "'-'",
          "word": "stateKey",
        },
        Object {
          "details": "A method of expect that compares expect's argument to the argument of .toEqual()",
          "id": 124,
          "isEditable": false,
          "nextWords": Array [
            "mockStateObject",
            "mockStateValue",
          ],
          "phase": Array [
            "A",
          ],
          "value": ".toEqual(",
          "word": ".toEqual(",
        },
        Object {
          "details": "A full copy of a components state, in object form, with the desired values changed",
          "id": 125,
          "isEditable": true,
          "nextWords": Array [
            ")",
          ],
          "phase": Array [
            "A",
          ],
          "value": "{-}",
          "word": "mockStateObject",
        },
        Object {
          "details": "The data, either primative or complex, that you are evaluating the wrapper against",
          "id": 126,
          "isEditable": true,
          "nextWords": Array [
            ")",
          ],
          "phase": Array [
            "A",
          ],
          "value": "-",
          "word": "mockStateValue",
        },
        Object {
          "details": "Start a new line of testing",
          "id": 127,
          "isEditable": false,
          "nextWords": Array [
            ")",
            "let",
            "wrapper",
            "expect",
            "beforeEach",
            "Prop Name",
            "/>",
            "}",
            "describe",
            "React Component Name",
          ],
          "phase": Array [
            "S",
            "E",
            "A",
            "T",
          ],
          "value": "New Line",
          "word": "New Line",
        },
        Object {
          "details": "Punctuation for ending complete code statements",
          "id": 128,
          "isEditable": false,
          "nextWords": Array [
            "New Line",
          ],
          "phase": Array [
            "S",
            "E",
            "A",
            "T",
          ],
          "value": ";",
          "word": ";",
        },
      ]
    }
    nextWords={null}
  />
  <Chalkboard
    chalkboardPhrases={Array []}
    currentPhrase=""
  />
</main>
`;
